using System;
using System.Diagnostics;

namespace ChipEight {
  class Memory {
    private readonly byte[] _memory = new byte[Consts.MemorySize];

    public Memory() {
      var charset = new byte[] {
        0xF0, 0x90, 0x90, 0x90, 0xF0,
        0x20, 0x60, 0x20, 0x20, 0x70,
        0xF0, 0x10, 0xF0, 0x80, 0xF0,
        0xF0, 0x10, 0xF0, 0x10, 0xF0,
        0x90, 0x90, 0xF0, 0x10, 0x10,
        0xF0, 0x80, 0xF0, 0x10, 0xF0,
        0xF0, 0x80, 0xF0, 0x90, 0xF0,
        0xF0, 0x10, 0x20, 0x40, 0x40,
        0xF0, 0x90, 0xF0, 0x90, 0xF0,
        0xF0, 0x90, 0xF0, 0x10, 0xF0,
        0xF0, 0x90, 0xF0, 0x90, 0x90,
        0xE0, 0x90, 0xE0, 0x90, 0xE0,
        0xF0, 0x80, 0x80, 0x80, 0xF0,
        0xE0, 0x90, 0x90, 0x90, 0xE0,
        0xF0, 0x80, 0xF0, 0x80, 0xF0,
        0xF0, 0x80, 0xF0, 0x80, 0x80
      };

      Array.Copy(charset, _memory, charset.Length);
    }

    public byte Get(int index) {
      AssertIndexInBounds(index);
      return _memory[index];
    }

    public void Set(int index, byte value) {
      AssertIndexInBounds(index);
      _memory[index] = value;
    }

    private void AssertIndexInBounds(int index) {
      Debug.Assert(index >= 0 && index < Consts.MemorySize);
    }
  }
}
